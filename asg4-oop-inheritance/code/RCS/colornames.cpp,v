head	1.9;
access;
symbols;
locks;
comment	@// @;


1.9
date	2014.05.07.20.30.34;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.05.03.01.42.23;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.05.03.01.39.21;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.05.03.00.07.18;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.05.03.00.00.48;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.02.23.58.04;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.02.23.54.02;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.02.23.53.12;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.02.23.52.46;	author -;	state -;
branches;
next	;


desc
@@


1.9
log
@-
@
text
@// $Id: colornames.cpp,v 1.8 2014-05-02 18:42:23-07 - - $

#include <cctype>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include <vector>
using namespace std;

#include "colornames.h"

#include "colortable.cppgen"

rgbcolor::rgbcolor (const string& name) {
   auto entry = color_names.find (name);
   if (entry != color_names.end()) {
      *this = entry->second;
   }else {
      invalid_argument error ("rgbcolor::rgbcolor(" + name + ")");
      if (name.size() != 8) throw error;
      string prefix = name.substr (0, 2);
      if (not (prefix == "0x" or prefix == "0X")) throw error;
      for (size_t index = 0; index < 3; ++index) {
         string hex = name.substr (index * 2 + 2, 2);
         for (char digit: hex) if (not isxdigit(digit)) throw error;
         ubvec[index] = stoul (hex, nullptr, 16);
      }
   }
}

rgbcolor::operator string() const {
   ostringstream result;
   result << "0x"
          << hex << setiosflags (ios::uppercase) << setfill ('0')
          << setw(2) << static_cast<unsigned> (red)
          << setw(2) << static_cast<unsigned> (green)
          << setw(2) << static_cast<unsigned> (blue);
   return result.str();
}

#ifdef __COMMENT_OUT_THIS_FUNCTION__
int main(int argc, char **argv) {
   vector<string> args (&argv[1], &argv[argc]);
   for (const auto& s: args) {
      try {
         rgbcolor d (s);
         cout << s << "=" << string(d) << endl;
      }catch (invalid_argument& error) {
         cout << "invalid_argument(" << error.what() << ")" << endl;
      }
   }
   cout << 100 << endl;
   return 0;
}
#endif

@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: colornames.cpp,v 1.7 2014-05-02 18:39:21-07 - - $
d15 1
a15 1
color::color (const string& name) {
d20 1
a20 1
      invalid_argument error ("color::color(" + name + ")");
d32 1
a32 1
color::operator string() const {
d47 1
a47 1
         color d (s);
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: colornames.cpp,v 1.6 2014-05-02 17:07:18-07 - - $
d42 1
a44 6
   color c;
   cout << "&c=" << &c << endl;
   cout << "&c.ubvec=" << &c.ubvec << endl;
   cout << "&c.red=" << &c.red << endl;
   cout << "&c.green=" << &c.green << endl;
   cout << "&c.blue=" << &c.blue << endl;
d56 2
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: colornames.cpp,v 1.5 2014-05-02 17:00:48-07 - - $
d3 2
d6 1
d17 12
a28 2
   if (entry == color_names.end()) {
      throw invalid_argument ("color::color(" + name + ")");
a29 1
   *this = entry->second;
d32 8
a39 3
ostream& operator<< (ostream& out, color c) {
   cout << "0x" << setw(2) << setfill('0') << hex << c.red
        << c.green << c.blue;
d45 5
a49 5
   cout << "&c=" << &c;
   cout << "&c.ubvec=" << &c.ubvec;
   cout << "&c.red=" << &c.red;
   cout << "&c.green=" << &c.green;
   cout << "&c.blue=" << &c.blue;
d53 1
a53 1
         cout << s << "=" << d << endl;
d58 2
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: colornames.cpp,v 1.4 2014-05-02 16:58:04-07 - - $
d3 1
d5 1
d20 4
d25 17
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: colornames.cpp,v 1.3 2014-05-02 16:54:02-07 - - $
d11 2
a12 2
   auto color = color_names.find (name);
   if (color == color_names.end()) {
d15 1
a15 1
   *this = *color;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: colornames.cpp,v 1.2 2014-05-02 16:53:12-07 - - $
d11 5
a15 3
   *this = color_names.find (name);
   if (result != color_names.end()) return result;
   throw invalid_argument ("color::color(" + name + ")");
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: colornames.cpp,v 1.1 2014-05-02 16:52:46-07 - - $
d11 1
a11 1
   color result = color_names.find (name);
a13 1
   return result;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d8 1
a8 1
#include "colornames.cppgen"
@
